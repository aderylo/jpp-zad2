-- evalTopDef :: TopDef -> Eval Env
-- evalTopDef (FnDef _ t ident args block) = do
--   let fun = Function $ \exprs -> do
--         env <- ask
--         let argNames = map (\(Arg _ _ ident) -> ident) args
--         let argValues = map fromJust $ filter isJust $ zipWith (\name expr -> case expr of
--                 Nothing -> Nothing
--                 Just expr -> Just (name, expr)) argNames exprs
--         let newEnv = (Map.fromList argValues, snd env)
--         local (const newEnv) (evalBlock block)
--   return (fst env, Map.insert ident fun (snd env))

-- evalTopDef :: TopDef -> Eval Env
-- evalTopDef (FnDef _ t ident args block) = do
--   (vEnv, fEnv) <- ask
--   let newEnv = (vEnv, Map.insert ident (Function $ func newEnv) fEnv)
--   return newEnv
--   where 
--     func :: Env -> [Expr] -> Eval Value
--     func scopedEnv exprs = 
--       do 
--         callEnv <- ask
--         let argNames = map (\(Arg _ _ ident) -> ident) args
--         let argValues = map fromJust $ filter isJust $ zipWith (\name expr ->
--                  case expr of
--                 Nothing -> Nothing
--                 Just expr -> Just (name, expr)) argNames exprs
--         let newEnv = (Map.fromList argValues, snd callEnv)
--         local (const newEnv) (evalBlock block)
